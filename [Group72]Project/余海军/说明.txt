project1&2: 使用了类似查表攻击似的数据结构，一边存表一边查表（可以使用多线程进一步优化脚本性能），以便可以在较短时间内找到一个前16bit的hash弱碰撞。
根据实验结果，寻找16bit碰撞中生日攻击所需要的时间少于ρ攻击，但是如果加长碰撞的bit长度，ρ攻击会比生日攻击展现出更好的效率。
project4:主要用了循环展开的方法对sm3在软件层面上优化
project5：以sm3的散列模块为基础实现了默克尔数，手动输入数据时默克尔树叶节点会生成相应的哈希值，非叶节点会生成相应的联结哈希值